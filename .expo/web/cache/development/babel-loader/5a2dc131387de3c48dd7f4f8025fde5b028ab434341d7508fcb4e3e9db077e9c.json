{"ast":null,"code":"'use strict';\n\nvar Systrace = require(\"../Performance/Systrace\");\nvar infoLog = require(\"./infoLog\");\nvar performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || require('fbjs/lib/performanceNow');\nvar _cookies = {};\nvar PRINT_TO_CONSOLE = false;\nfunction createPerformanceLogger() {\n  var result = {\n    _timespans: {},\n    _extras: {},\n    _points: {},\n    addTimespan: function addTimespan(key, lengthInMs, description) {\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        description: description,\n        totalTime: lengthInMs\n      };\n    },\n    startTimespan: function startTimespan(key, description) {\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        description: description,\n        startTime: performanceNow()\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'start: ' + key);\n      }\n    },\n    stopTimespan: function stopTimespan(key, options) {\n      var timespan = this._timespans[key];\n      if (!timespan || !timespan.startTime) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n        }\n        return;\n      }\n      if (timespan.endTime && !(options != null && options.update)) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n        }\n        return;\n      }\n      timespan.endTime = performanceNow();\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'end: ' + key);\n      }\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n    },\n    clear: function clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clear');\n      }\n    },\n    clearCompleted: function clearCompleted() {\n      for (var _key in this._timespans) {\n        if (this._timespans[_key].totalTime) {\n          delete this._timespans[_key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearCompleted');\n      }\n    },\n    clearExceptTimespans: function clearExceptTimespans(keys) {\n      this._timespans = Object.keys(this._timespans).reduce(function (previous, key) {\n        if (keys.indexOf(key) !== -1) {\n          previous[key] = this._timespans[key];\n        }\n        return previous;\n      }, {});\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);\n      }\n    },\n    currentTimestamp: function currentTimestamp() {\n      return performanceNow();\n    },\n    getTimespans: function getTimespans() {\n      return this._timespans;\n    },\n    hasTimespan: function hasTimespan(key) {\n      return !!this._timespans[key];\n    },\n    logTimespans: function logTimespans() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key2 in this._timespans) {\n          if (this._timespans[_key2].totalTime) {\n            infoLog(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');\n          }\n        }\n      }\n    },\n    addTimespans: function addTimespans(newTimespans, labels) {\n      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n        var label = labels[ii / 2];\n        this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);\n      }\n    },\n    setExtra: function setExtra(key, value) {\n      if (this._extras[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {\n            key: key,\n            currentValue: this._extras[key],\n            attemptedValue: value\n          });\n        }\n        return;\n      }\n      this._extras[key] = value;\n    },\n    getExtras: function getExtras() {\n      return this._extras;\n    },\n    removeExtra: function removeExtra(key) {\n      var value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    },\n    logExtras: function logExtras() {\n      if (PRINT_TO_CONSOLE) {\n        infoLog(this._extras);\n      }\n    },\n    markPoint: function markPoint(key, timestamp) {\n      if (this._points[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n        }\n        return;\n      }\n      this._points[key] = timestamp != null ? timestamp : performanceNow();\n    },\n    getPoints: function getPoints() {\n      return this._points;\n    },\n    logPoints: function logPoints() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key3 in this._points) {\n          infoLog(_key3 + ': ' + this._points[_key3] + 'ms');\n        }\n      }\n    },\n    logEverything: function logEverything() {\n      this.logTimespans();\n      this.logExtras();\n      this.logPoints();\n    }\n  };\n  return result;\n}\nmodule.exports = createPerformanceLogger;","map":{"version":3,"names":["Systrace","require","infoLog","performanceNow","global","nativeQPLTimestamp","nativePerformanceNow","_cookies","PRINT_TO_CONSOLE","createPerformanceLogger","result","_timespans","_extras","_points","addTimespan","key","lengthInMs","description","__DEV__","totalTime","startTimespan","startTime","beginAsyncEvent","stopTimespan","options","timespan","endTime","update","endAsyncEvent","clear","clearCompleted","clearExceptTimespans","keys","Object","reduce","previous","indexOf","currentTimestamp","getTimespans","hasTimespan","logTimespans","addTimespans","newTimespans","labels","ii","l","length","label","setExtra","value","currentValue","attemptedValue","getExtras","removeExtra","logExtras","markPoint","timestamp","getPoints","logPoints","logEverything","module","exports"],"sources":["D:/React-Native/Pharma/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst Systrace = require('../Performance/Systrace');\n\nconst infoLog = require('./infoLog');\nconst performanceNow =\n  global.nativeQPLTimestamp ||\n  global.nativePerformanceNow ||\n  require('fbjs/lib/performanceNow');\n\ntype Timespan = {\n  description?: string,\n  totalTime?: number,\n  startTime?: number,\n  endTime?: number,\n  ...\n};\n\nexport type IPerformanceLogger = {\n  addTimespan(string, number, string | void): void,\n  startTimespan(string, string | void): void,\n  stopTimespan(string, options?: {update?: boolean}): void,\n  clear(): void,\n  clearCompleted(): void,\n  clearExceptTimespans(Array<string>): void,\n  currentTimestamp(): number,\n  getTimespans(): {[key: string]: Timespan, ...},\n  hasTimespan(string): boolean,\n  logTimespans(): void,\n  addTimespans(Array<number>, Array<string>): void,\n  setExtra(string, any): void,\n  getExtras(): {[key: string]: any, ...},\n  removeExtra(string): ?any,\n  logExtras(): void,\n  markPoint(string, number | void): void,\n  getPoints(): {[key: string]: number, ...},\n  logPoints(): void,\n  logEverything(): void,\n  ...\n};\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nfunction createPerformanceLogger(): IPerformanceLogger {\n  const result: IPerformanceLogger & {\n    _timespans: {[key: string]: Timespan, ...},\n    _extras: {[key: string]: any, ...},\n    _points: {[key: string]: number, ...},\n    ...\n  } = {\n    _timespans: {},\n    _extras: {},\n    _points: {},\n\n    addTimespan(key: string, lengthInMs: number, description?: string) {\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to add a timespan that already exists ',\n            key,\n          );\n        }\n        return;\n      }\n\n      this._timespans[key] = {\n        description: description,\n        totalTime: lengthInMs,\n      };\n    },\n\n    startTimespan(key: string, description?: string) {\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to start a timespan that already exists ',\n            key,\n          );\n        }\n        return;\n      }\n\n      this._timespans[key] = {\n        description: description,\n        startTime: performanceNow(),\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'start: ' + key);\n      }\n    },\n\n    stopTimespan(key: string, options?: {update?: boolean}) {\n      const timespan = this._timespans[key];\n      if (!timespan || !timespan.startTime) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to end a timespan that has not started ',\n            key,\n          );\n        }\n        return;\n      }\n      if (timespan.endTime && !options?.update) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to end a timespan that has already ended ',\n            key,\n          );\n        }\n        return;\n      }\n\n      timespan.endTime = performanceNow();\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'end: ' + key);\n      }\n\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n    },\n\n    clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clear');\n      }\n    },\n\n    clearCompleted() {\n      for (const key in this._timespans) {\n        if (this._timespans[key].totalTime) {\n          delete this._timespans[key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearCompleted');\n      }\n    },\n\n    clearExceptTimespans(keys: Array<string>) {\n      this._timespans = Object.keys(this._timespans).reduce(function(\n        previous,\n        key,\n      ) {\n        if (keys.indexOf(key) !== -1) {\n          previous[key] = this._timespans[key];\n        }\n        return previous;\n      },\n      {});\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);\n      }\n    },\n\n    currentTimestamp() {\n      return performanceNow();\n    },\n\n    getTimespans() {\n      return this._timespans;\n    },\n\n    hasTimespan(key: string) {\n      return !!this._timespans[key];\n    },\n\n    logTimespans() {\n      if (PRINT_TO_CONSOLE) {\n        for (const key in this._timespans) {\n          if (this._timespans[key].totalTime) {\n            infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n          }\n        }\n      }\n    },\n\n    addTimespans(newTimespans: Array<number>, labels: Array<string>) {\n      for (let ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n        const label = labels[ii / 2];\n        this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);\n      }\n    },\n\n    setExtra(key: string, value: any) {\n      if (this._extras[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to set an extra that already exists ',\n            {key, currentValue: this._extras[key], attemptedValue: value},\n          );\n        }\n        return;\n      }\n      this._extras[key] = value;\n    },\n\n    getExtras() {\n      return this._extras;\n    },\n\n    removeExtra(key: string): ?any {\n      const value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    },\n\n    logExtras() {\n      if (PRINT_TO_CONSOLE) {\n        infoLog(this._extras);\n      }\n    },\n\n    markPoint(key: string, timestamp?: number) {\n      if (this._points[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to mark a point that has been already logged ',\n            key,\n          );\n        }\n        return;\n      }\n      this._points[key] = timestamp ?? performanceNow();\n    },\n\n    getPoints() {\n      return this._points;\n    },\n\n    logPoints() {\n      if (PRINT_TO_CONSOLE) {\n        for (const key in this._points) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    },\n\n    logEverything() {\n      this.logTimespans();\n      this.logExtras();\n      this.logPoints();\n    },\n  };\n  return result;\n}\n\nmodule.exports = createPerformanceLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}