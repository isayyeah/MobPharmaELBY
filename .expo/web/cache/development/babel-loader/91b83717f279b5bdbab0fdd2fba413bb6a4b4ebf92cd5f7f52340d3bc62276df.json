{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _get = require(\"@babel/runtime/helpers/get\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar BlobManager = require(\"../Blob/BlobManager\");\nvar EventTarget = require('event-target-shim');\nvar GlobalPerformanceLogger = require('react-native/Libraries/Utilities/GlobalPerformanceLogger');\nvar RCTNetworking = require(\"./RCTNetworking\");\nvar base64 = require('base64-js');\nvar invariant = require('invariant');\nvar warning = require('fbjs/lib/warning');\nvar DEBUG_NETWORK_SEND_DELAY = false;\nif (BlobManager.isAvailable) {\n  BlobManager.addNetworkingHandler();\n}\nvar UNSENT = 0;\nvar OPENED = 1;\nvar HEADERS_RECEIVED = 2;\nvar LOADING = 3;\nvar DONE = 4;\nvar SUPPORTED_RESPONSE_TYPES = {\n  arraybuffer: typeof global.ArrayBuffer === 'function',\n  blob: typeof global.Blob === 'function',\n  document: false,\n  json: true,\n  text: true,\n  '': true\n};\nvar REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];\nvar XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');\nvar XMLHttpRequestEventTarget = function (_ref) {\n  _inherits(XMLHttpRequestEventTarget, _ref);\n  var _super = _createSuper(XMLHttpRequestEventTarget);\n  function XMLHttpRequestEventTarget() {\n    _classCallCheck(this, XMLHttpRequestEventTarget);\n    return _super.apply(this, arguments);\n  }\n  return XMLHttpRequestEventTarget;\n}(EventTarget.apply(void 0, REQUEST_EVENTS));\nvar XMLHttpRequest = function (_ref2) {\n  _inherits(XMLHttpRequest, _ref2);\n  var _super2 = _createSuper(XMLHttpRequest);\n  function XMLHttpRequest() {\n    var _this;\n    _classCallCheck(this, XMLHttpRequest);\n    _this = _super2.call(this);\n    _this.UNSENT = UNSENT;\n    _this.OPENED = OPENED;\n    _this.HEADERS_RECEIVED = HEADERS_RECEIVED;\n    _this.LOADING = LOADING;\n    _this.DONE = DONE;\n    _this.readyState = UNSENT;\n    _this.status = 0;\n    _this.timeout = 0;\n    _this.withCredentials = true;\n    _this.upload = new XMLHttpRequestEventTarget();\n    _this._aborted = false;\n    _this._hasError = false;\n    _this._method = null;\n    _this._perfKey = null;\n    _this._response = '';\n    _this._url = null;\n    _this._timedOut = false;\n    _this._trackingName = 'unknown';\n    _this._incrementalEvents = false;\n    _this._reset();\n    return _this;\n  }\n  _createClass(XMLHttpRequest, [{\n    key: \"_reset\",\n    value: function _reset() {\n      this.readyState = this.UNSENT;\n      this.responseHeaders = undefined;\n      this.status = 0;\n      delete this.responseURL;\n      this._requestId = null;\n      this._cachedResponse = undefined;\n      this._hasError = false;\n      this._headers = {};\n      this._response = '';\n      this._responseType = '';\n      this._sent = false;\n      this._lowerCaseResponseHeaders = {};\n      this._clearSubscriptions();\n      this._timedOut = false;\n    }\n  }, {\n    key: \"responseType\",\n    get: function get() {\n      return this._responseType;\n    },\n    set: function set(responseType) {\n      if (this._sent) {\n        throw new Error(\"Failed to set the 'responseType' property on 'XMLHttpRequest': The \" + 'response type cannot be set after the request has been sent.');\n      }\n      if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {\n        warning(false, \"The provided value '\" + responseType + \"' is not a valid 'responseType'.\");\n        return;\n      }\n      invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', \"The provided value '\" + responseType + \"' is unsupported in this environment.\");\n      if (responseType === 'blob') {\n        invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');\n      }\n      this._responseType = responseType;\n    }\n  }, {\n    key: \"responseText\",\n    get: function get() {\n      if (this._responseType !== '' && this._responseType !== 'text') {\n        throw new Error(\"The 'responseText' property is only available if 'responseType' \" + (\"is set to '' or 'text', but it is '\" + this._responseType + \"'.\"));\n      }\n      if (this.readyState < LOADING) {\n        return '';\n      }\n      return this._response;\n    }\n  }, {\n    key: \"response\",\n    get: function get() {\n      var responseType = this.responseType;\n      if (responseType === '' || responseType === 'text') {\n        return this.readyState < LOADING || this._hasError ? '' : this._response;\n      }\n      if (this.readyState !== DONE) {\n        return null;\n      }\n      if (this._cachedResponse !== undefined) {\n        return this._cachedResponse;\n      }\n      switch (responseType) {\n        case 'document':\n          this._cachedResponse = null;\n          break;\n        case 'arraybuffer':\n          this._cachedResponse = base64.toByteArray(this._response).buffer;\n          break;\n        case 'blob':\n          if (typeof this._response === 'object' && this._response) {\n            this._cachedResponse = BlobManager.createFromOptions(this._response);\n          } else if (this._response === '') {\n            this._cachedResponse = BlobManager.createFromParts([]);\n          } else {\n            throw new Error(\"Invalid response for blob: \" + this._response);\n          }\n          break;\n        case 'json':\n          try {\n            this._cachedResponse = JSON.parse(this._response);\n          } catch (_) {\n            this._cachedResponse = null;\n          }\n          break;\n        default:\n          this._cachedResponse = null;\n      }\n      return this._cachedResponse;\n    }\n  }, {\n    key: \"__didCreateRequest\",\n    value: function __didCreateRequest(requestId) {\n      this._requestId = requestId;\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);\n    }\n  }, {\n    key: \"__didUploadProgress\",\n    value: function __didUploadProgress(requestId, progress, total) {\n      if (requestId === this._requestId) {\n        this.upload.dispatchEvent({\n          type: 'progress',\n          lengthComputable: true,\n          loaded: progress,\n          total: total\n        });\n      }\n    }\n  }, {\n    key: \"__didReceiveResponse\",\n    value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {\n      if (requestId === this._requestId) {\n        this._perfKey != null && GlobalPerformanceLogger.stopTimespan(this._perfKey);\n        this.status = status;\n        this.setResponseHeaders(responseHeaders);\n        this.setReadyState(this.HEADERS_RECEIVED);\n        if (responseURL || responseURL === '') {\n          this.responseURL = responseURL;\n        } else {\n          delete this.responseURL;\n        }\n        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});\n      }\n    }\n  }, {\n    key: \"__didReceiveData\",\n    value: function __didReceiveData(requestId, response) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n      this._response = response;\n      this._cachedResponse = undefined;\n      this.setReadyState(this.LOADING);\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);\n    }\n  }, {\n    key: \"__didReceiveIncrementalData\",\n    value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n      if (!this._response) {\n        this._response = responseText;\n      } else {\n        this._response += responseText;\n      }\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);\n      this.setReadyState(this.LOADING);\n      this.__didReceiveDataProgress(requestId, progress, total);\n    }\n  }, {\n    key: \"__didReceiveDataProgress\",\n    value: function __didReceiveDataProgress(requestId, loaded, total) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n      this.dispatchEvent({\n        type: 'progress',\n        lengthComputable: total >= 0,\n        loaded: loaded,\n        total: total\n      });\n    }\n  }, {\n    key: \"__didCompleteResponse\",\n    value: function __didCompleteResponse(requestId, error, timeOutError) {\n      if (requestId === this._requestId) {\n        if (error) {\n          if (this._responseType === '' || this._responseType === 'text') {\n            this._response = error;\n          }\n          this._hasError = true;\n          if (timeOutError) {\n            this._timedOut = true;\n          }\n        }\n        this._clearSubscriptions();\n        this._requestId = null;\n        this.setReadyState(this.DONE);\n        if (error) {\n          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);\n        } else {\n          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);\n        }\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      (this._subscriptions || []).forEach(function (sub) {\n        if (sub) {\n          sub.remove();\n        }\n      });\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"getAllResponseHeaders\",\n    value: function getAllResponseHeaders() {\n      if (!this.responseHeaders) {\n        return null;\n      }\n      var headers = this.responseHeaders || {};\n      return Object.keys(headers).map(function (headerName) {\n        return headerName + ': ' + headers[headerName];\n      }).join('\\r\\n');\n    }\n  }, {\n    key: \"getResponseHeader\",\n    value: function getResponseHeader(header) {\n      var value = this._lowerCaseResponseHeaders[header.toLowerCase()];\n      return value !== undefined ? value : null;\n    }\n  }, {\n    key: \"setRequestHeader\",\n    value: function setRequestHeader(header, value) {\n      if (this.readyState !== this.OPENED) {\n        throw new Error('Request has not been opened');\n      }\n      this._headers[header.toLowerCase()] = String(value);\n    }\n  }, {\n    key: \"setTrackingName\",\n    value: function setTrackingName(trackingName) {\n      this._trackingName = trackingName;\n      return this;\n    }\n  }, {\n    key: \"open\",\n    value: function open(method, url, async) {\n      if (this.readyState !== this.UNSENT) {\n        throw new Error('Cannot open, already sending');\n      }\n      if (async !== undefined && !async) {\n        throw new Error('Synchronous http requests are not supported');\n      }\n      if (!url) {\n        throw new Error('Cannot load an empty url');\n      }\n      this._method = method.toUpperCase();\n      this._url = url;\n      this._aborted = false;\n      this.setReadyState(this.OPENED);\n    }\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      var _this2 = this;\n      if (this.readyState !== this.OPENED) {\n        throw new Error('Request has not been opened');\n      }\n      if (this._sent) {\n        throw new Error('Request has already been sent');\n      }\n      this._sent = true;\n      var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;\n      this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {\n        return _this2.__didUploadProgress.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {\n        return _this2.__didReceiveResponse.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {\n        return _this2.__didReceiveData.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {\n        return _this2.__didReceiveIncrementalData.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {\n        return _this2.__didReceiveDataProgress.apply(_this2, _toConsumableArray(args));\n      }));\n      this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {\n        return _this2.__didCompleteResponse.apply(_this2, _toConsumableArray(args));\n      }));\n      var nativeResponseType = 'text';\n      if (this._responseType === 'arraybuffer') {\n        nativeResponseType = 'base64';\n      }\n      if (this._responseType === 'blob') {\n        nativeResponseType = 'blob';\n      }\n      var doSend = function doSend() {\n        var friendlyName = _this2._trackingName !== 'unknown' ? _this2._trackingName : _this2._url;\n        _this2._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);\n        GlobalPerformanceLogger.startTimespan(_this2._perfKey);\n        invariant(_this2._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);\n        invariant(_this2._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);\n        RCTNetworking.sendRequest(_this2._method, _this2._trackingName, _this2._url, _this2._headers, data, nativeResponseType, incrementalEvents, _this2.timeout, _this2.__didCreateRequest.bind(_this2), _this2.withCredentials);\n      };\n      if (DEBUG_NETWORK_SEND_DELAY) {\n        setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);\n      } else {\n        doSend();\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this._aborted = true;\n      if (this._requestId) {\n        RCTNetworking.abortRequest(this._requestId);\n      }\n      if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {\n        this._reset();\n        this.setReadyState(this.DONE);\n      }\n      this._reset();\n    }\n  }, {\n    key: \"setResponseHeaders\",\n    value: function setResponseHeaders(responseHeaders) {\n      this.responseHeaders = responseHeaders || null;\n      var headers = responseHeaders || {};\n      this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {\n        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];\n        return lcaseHeaders;\n      }, {});\n    }\n  }, {\n    key: \"setReadyState\",\n    value: function setReadyState(newState) {\n      this.readyState = newState;\n      this.dispatchEvent({\n        type: 'readystatechange'\n      });\n      if (newState === this.DONE) {\n        if (this._aborted) {\n          this.dispatchEvent({\n            type: 'abort'\n          });\n        } else if (this._hasError) {\n          if (this._timedOut) {\n            this.dispatchEvent({\n              type: 'timeout'\n            });\n          } else {\n            this.dispatchEvent({\n              type: 'error'\n            });\n          }\n        } else {\n          this.dispatchEvent({\n            type: 'load'\n          });\n        }\n        this.dispatchEvent({\n          type: 'loadend'\n        });\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener) {\n      if (type === 'readystatechange' || type === 'progress') {\n        this._incrementalEvents = true;\n      }\n      _get(_getPrototypeOf(XMLHttpRequest.prototype), \"addEventListener\", this).call(this, type, listener);\n    }\n  }], [{\n    key: \"setInterceptor\",\n    value: function setInterceptor(interceptor) {\n      XMLHttpRequest._interceptor = interceptor;\n    }\n  }]);\n  return XMLHttpRequest;\n}(EventTarget.apply(void 0, _toConsumableArray(XHR_EVENTS)));\nXMLHttpRequest.UNSENT = UNSENT;\nXMLHttpRequest.OPENED = OPENED;\nXMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;\nXMLHttpRequest.LOADING = LOADING;\nXMLHttpRequest.DONE = DONE;\nXMLHttpRequest._interceptor = null;\nmodule.exports = XMLHttpRequest;","map":{"version":3,"names":["_toConsumableArray","require","_createClass","_get","_classCallCheck","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","BlobManager","EventTarget","GlobalPerformanceLogger","RCTNetworking","base64","invariant","warning","DEBUG_NETWORK_SEND_DELAY","isAvailable","addNetworkingHandler","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","SUPPORTED_RESPONSE_TYPES","arraybuffer","global","ArrayBuffer","blob","Blob","document","json","text","REQUEST_EVENTS","XHR_EVENTS","concat","XMLHttpRequestEventTarget","_ref","_super","XMLHttpRequest","_ref2","_super2","_this","readyState","status","timeout","withCredentials","upload","_aborted","_hasError","_method","_perfKey","_response","_url","_timedOut","_trackingName","_incrementalEvents","_reset","key","value","responseHeaders","undefined","responseURL","_requestId","_cachedResponse","_headers","_responseType","_sent","_lowerCaseResponseHeaders","_clearSubscriptions","get","set","responseType","Error","hasOwnProperty","toByteArray","buffer","createFromOptions","createFromParts","JSON","parse","_","__didCreateRequest","requestId","_interceptor","requestSent","__didUploadProgress","progress","total","dispatchEvent","type","lengthComputable","loaded","__didReceiveResponse","stopTimespan","setResponseHeaders","setReadyState","responseReceived","__didReceiveData","response","dataReceived","__didReceiveIncrementalData","responseText","__didReceiveDataProgress","__didCompleteResponse","error","timeOutError","loadingFailed","loadingFinished","length","_subscriptions","forEach","sub","remove","getAllResponseHeaders","headers","Object","keys","map","headerName","join","getResponseHeader","header","toLowerCase","setRequestHeader","String","setTrackingName","trackingName","open","method","url","async","toUpperCase","send","data","_this2","incrementalEvents","onreadystatechange","onprogress","push","addListener","args","nativeResponseType","doSend","friendlyName","startTimespan","sendRequest","bind","setTimeout","abort","abortRequest","reduce","lcaseHeaders","newState","addEventListener","listener","setInterceptor","interceptor","module","exports"],"sources":["D:/React-Native/Pharma/node_modules/react-native/Libraries/Network/XMLHttpRequest.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst BlobManager = require('../Blob/BlobManager');\nconst EventTarget = require('event-target-shim');\nconst GlobalPerformanceLogger = require('react-native/Libraries/Utilities/GlobalPerformanceLogger');\nconst RCTNetworking = require('./RCTNetworking');\n\nconst base64 = require('base64-js');\nconst invariant = require('invariant');\nconst warning = require('fbjs/lib/warning');\n\nconst DEBUG_NETWORK_SEND_DELAY: false = false; // Set to a number of milliseconds when debugging\n\nexport type NativeResponseType = 'base64' | 'blob' | 'text';\nexport type ResponseType =\n  | ''\n  | 'arraybuffer'\n  | 'blob'\n  | 'document'\n  | 'json'\n  | 'text';\nexport type Response = ?Object | string;\n\ntype XHRInterceptor = {\n  requestSent(id: number, url: string, method: string, headers: Object): void,\n  responseReceived(\n    id: number,\n    url: string,\n    status: number,\n    headers: Object,\n  ): void,\n  dataReceived(id: number, data: string): void,\n  loadingFinished(id: number, encodedDataLength: number): void,\n  loadingFailed(id: number, error: string): void,\n  ...\n};\n\n// The native blob module is optional so inject it here if available.\nif (BlobManager.isAvailable) {\n  BlobManager.addNetworkingHandler();\n}\n\nconst UNSENT = 0;\nconst OPENED = 1;\nconst HEADERS_RECEIVED = 2;\nconst LOADING = 3;\nconst DONE = 4;\n\nconst SUPPORTED_RESPONSE_TYPES = {\n  arraybuffer: typeof global.ArrayBuffer === 'function',\n  blob: typeof global.Blob === 'function',\n  document: false,\n  json: true,\n  text: true,\n  '': true,\n};\n\nconst REQUEST_EVENTS = [\n  'abort',\n  'error',\n  'load',\n  'loadstart',\n  'progress',\n  'timeout',\n  'loadend',\n];\n\nconst XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');\n\nclass XMLHttpRequestEventTarget extends (EventTarget(...REQUEST_EVENTS): any) {\n  onload: ?Function;\n  onloadstart: ?Function;\n  onprogress: ?Function;\n  ontimeout: ?Function;\n  onerror: ?Function;\n  onabort: ?Function;\n  onloadend: ?Function;\n}\n\n/**\n * Shared base for platform-specific XMLHttpRequest implementations.\n */\nclass XMLHttpRequest extends (EventTarget(...XHR_EVENTS): any) {\n  static UNSENT: number = UNSENT;\n  static OPENED: number = OPENED;\n  static HEADERS_RECEIVED: number = HEADERS_RECEIVED;\n  static LOADING: number = LOADING;\n  static DONE: number = DONE;\n\n  static _interceptor: ?XHRInterceptor = null;\n\n  UNSENT: number = UNSENT;\n  OPENED: number = OPENED;\n  HEADERS_RECEIVED: number = HEADERS_RECEIVED;\n  LOADING: number = LOADING;\n  DONE: number = DONE;\n\n  // EventTarget automatically initializes these to `null`.\n  onload: ?Function;\n  onloadstart: ?Function;\n  onprogress: ?Function;\n  ontimeout: ?Function;\n  onerror: ?Function;\n  onabort: ?Function;\n  onloadend: ?Function;\n  onreadystatechange: ?Function;\n\n  readyState: number = UNSENT;\n  responseHeaders: ?Object;\n  status: number = 0;\n  timeout: number = 0;\n  responseURL: ?string;\n  withCredentials: boolean = true;\n\n  upload: XMLHttpRequestEventTarget = new XMLHttpRequestEventTarget();\n\n  _requestId: ?number;\n  _subscriptions: Array<*>;\n\n  _aborted: boolean = false;\n  _cachedResponse: Response;\n  _hasError: boolean = false;\n  _headers: Object;\n  _lowerCaseResponseHeaders: Object;\n  _method: ?string = null;\n  _perfKey: ?string = null;\n  _response: string | ?Object;\n  _responseType: ResponseType;\n  _response: string = '';\n  _sent: boolean;\n  _url: ?string = null;\n  _timedOut: boolean = false;\n  _trackingName: string = 'unknown';\n  _incrementalEvents: boolean = false;\n\n  static setInterceptor(interceptor: ?XHRInterceptor) {\n    XMLHttpRequest._interceptor = interceptor;\n  }\n\n  constructor() {\n    super();\n    this._reset();\n  }\n\n  _reset(): void {\n    this.readyState = this.UNSENT;\n    this.responseHeaders = undefined;\n    this.status = 0;\n    delete this.responseURL;\n\n    this._requestId = null;\n\n    this._cachedResponse = undefined;\n    this._hasError = false;\n    this._headers = {};\n    this._response = '';\n    this._responseType = '';\n    this._sent = false;\n    this._lowerCaseResponseHeaders = {};\n\n    this._clearSubscriptions();\n    this._timedOut = false;\n  }\n\n  get responseType(): ResponseType {\n    return this._responseType;\n  }\n\n  set responseType(responseType: ResponseType): void {\n    if (this._sent) {\n      throw new Error(\n        \"Failed to set the 'responseType' property on 'XMLHttpRequest': The \" +\n          'response type cannot be set after the request has been sent.',\n      );\n    }\n    if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {\n      warning(\n        false,\n        `The provided value '${responseType}' is not a valid 'responseType'.`,\n      );\n      return;\n    }\n\n    // redboxes early, e.g. for 'arraybuffer' on ios 7\n    invariant(\n      SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document',\n      `The provided value '${responseType}' is unsupported in this environment.`,\n    );\n\n    if (responseType === 'blob') {\n      invariant(\n        BlobManager.isAvailable,\n        'Native module BlobModule is required for blob support',\n      );\n    }\n    this._responseType = responseType;\n  }\n\n  get responseText(): string {\n    if (this._responseType !== '' && this._responseType !== 'text') {\n      throw new Error(\n        \"The 'responseText' property is only available if 'responseType' \" +\n          `is set to '' or 'text', but it is '${this._responseType}'.`,\n      );\n    }\n    if (this.readyState < LOADING) {\n      return '';\n    }\n    return this._response;\n  }\n\n  get response(): Response {\n    const {responseType} = this;\n    if (responseType === '' || responseType === 'text') {\n      return this.readyState < LOADING || this._hasError ? '' : this._response;\n    }\n\n    if (this.readyState !== DONE) {\n      return null;\n    }\n\n    if (this._cachedResponse !== undefined) {\n      return this._cachedResponse;\n    }\n\n    switch (responseType) {\n      case 'document':\n        this._cachedResponse = null;\n        break;\n\n      case 'arraybuffer':\n        this._cachedResponse = base64.toByteArray(this._response).buffer;\n        break;\n\n      case 'blob':\n        if (typeof this._response === 'object' && this._response) {\n          this._cachedResponse = BlobManager.createFromOptions(this._response);\n        } else if (this._response === '') {\n          this._cachedResponse = BlobManager.createFromParts([]);\n        } else {\n          throw new Error(`Invalid response for blob: ${this._response}`);\n        }\n        break;\n\n      case 'json':\n        try {\n          this._cachedResponse = JSON.parse(this._response);\n        } catch (_) {\n          this._cachedResponse = null;\n        }\n        break;\n\n      default:\n        this._cachedResponse = null;\n    }\n\n    return this._cachedResponse;\n  }\n\n  // exposed for testing\n  __didCreateRequest(requestId: number): void {\n    this._requestId = requestId;\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.requestSent(\n        requestId,\n        this._url || '',\n        this._method || 'GET',\n        this._headers,\n      );\n  }\n\n  // exposed for testing\n  __didUploadProgress(\n    requestId: number,\n    progress: number,\n    total: number,\n  ): void {\n    if (requestId === this._requestId) {\n      this.upload.dispatchEvent({\n        type: 'progress',\n        lengthComputable: true,\n        loaded: progress,\n        total,\n      });\n    }\n  }\n\n  __didReceiveResponse(\n    requestId: number,\n    status: number,\n    responseHeaders: ?Object,\n    responseURL: ?string,\n  ): void {\n    if (requestId === this._requestId) {\n      this._perfKey != null &&\n        GlobalPerformanceLogger.stopTimespan(this._perfKey);\n      this.status = status;\n      this.setResponseHeaders(responseHeaders);\n      this.setReadyState(this.HEADERS_RECEIVED);\n      if (responseURL || responseURL === '') {\n        this.responseURL = responseURL;\n      } else {\n        delete this.responseURL;\n      }\n\n      XMLHttpRequest._interceptor &&\n        XMLHttpRequest._interceptor.responseReceived(\n          requestId,\n          responseURL || this._url || '',\n          status,\n          responseHeaders || {},\n        );\n    }\n  }\n\n  __didReceiveData(requestId: number, response: string): void {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    this._response = response;\n    this._cachedResponse = undefined; // force lazy recomputation\n    this.setReadyState(this.LOADING);\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.dataReceived(requestId, response);\n  }\n\n  __didReceiveIncrementalData(\n    requestId: number,\n    responseText: string,\n    progress: number,\n    total: number,\n  ) {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    if (!this._response) {\n      this._response = responseText;\n    } else {\n      this._response += responseText;\n    }\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.dataReceived(requestId, responseText);\n\n    this.setReadyState(this.LOADING);\n    this.__didReceiveDataProgress(requestId, progress, total);\n  }\n\n  __didReceiveDataProgress(\n    requestId: number,\n    loaded: number,\n    total: number,\n  ): void {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    this.dispatchEvent({\n      type: 'progress',\n      lengthComputable: total >= 0,\n      loaded,\n      total,\n    });\n  }\n\n  // exposed for testing\n  __didCompleteResponse(\n    requestId: number,\n    error: string,\n    timeOutError: boolean,\n  ): void {\n    if (requestId === this._requestId) {\n      if (error) {\n        if (this._responseType === '' || this._responseType === 'text') {\n          this._response = error;\n        }\n        this._hasError = true;\n        if (timeOutError) {\n          this._timedOut = true;\n        }\n      }\n      this._clearSubscriptions();\n      this._requestId = null;\n      this.setReadyState(this.DONE);\n\n      if (error) {\n        XMLHttpRequest._interceptor &&\n          XMLHttpRequest._interceptor.loadingFailed(requestId, error);\n      } else {\n        XMLHttpRequest._interceptor &&\n          XMLHttpRequest._interceptor.loadingFinished(\n            requestId,\n            this._response.length,\n          );\n      }\n    }\n  }\n\n  _clearSubscriptions(): void {\n    (this._subscriptions || []).forEach(sub => {\n      if (sub) {\n        sub.remove();\n      }\n    });\n    this._subscriptions = [];\n  }\n\n  getAllResponseHeaders(): ?string {\n    if (!this.responseHeaders) {\n      // according to the spec, return null if no response has been received\n      return null;\n    }\n    const headers = this.responseHeaders || {};\n    return Object.keys(headers)\n      .map(headerName => {\n        return headerName + ': ' + headers[headerName];\n      })\n      .join('\\r\\n');\n  }\n\n  getResponseHeader(header: string): ?string {\n    const value = this._lowerCaseResponseHeaders[header.toLowerCase()];\n    return value !== undefined ? value : null;\n  }\n\n  setRequestHeader(header: string, value: any): void {\n    if (this.readyState !== this.OPENED) {\n      throw new Error('Request has not been opened');\n    }\n    this._headers[header.toLowerCase()] = String(value);\n  }\n\n  /**\n   * Custom extension for tracking origins of request.\n   */\n  setTrackingName(trackingName: string): XMLHttpRequest {\n    this._trackingName = trackingName;\n    return this;\n  }\n\n  open(method: string, url: string, async: ?boolean): void {\n    /* Other optional arguments are not supported yet */\n    if (this.readyState !== this.UNSENT) {\n      throw new Error('Cannot open, already sending');\n    }\n    if (async !== undefined && !async) {\n      // async is default\n      throw new Error('Synchronous http requests are not supported');\n    }\n    if (!url) {\n      throw new Error('Cannot load an empty url');\n    }\n    this._method = method.toUpperCase();\n    this._url = url;\n    this._aborted = false;\n    this.setReadyState(this.OPENED);\n  }\n\n  send(data: any): void {\n    if (this.readyState !== this.OPENED) {\n      throw new Error('Request has not been opened');\n    }\n    if (this._sent) {\n      throw new Error('Request has already been sent');\n    }\n    this._sent = true;\n    const incrementalEvents =\n      this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;\n\n    this._subscriptions.push(\n      RCTNetworking.addListener('didSendNetworkData', args =>\n        this.__didUploadProgress(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkResponse', args =>\n        this.__didReceiveResponse(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkData', args =>\n        this.__didReceiveData(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkIncrementalData', args =>\n        this.__didReceiveIncrementalData(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkDataProgress', args =>\n        this.__didReceiveDataProgress(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didCompleteNetworkResponse', args =>\n        this.__didCompleteResponse(...args),\n      ),\n    );\n\n    let nativeResponseType: NativeResponseType = 'text';\n    if (this._responseType === 'arraybuffer') {\n      nativeResponseType = 'base64';\n    }\n    if (this._responseType === 'blob') {\n      nativeResponseType = 'blob';\n    }\n\n    const doSend = () => {\n      const friendlyName =\n        this._trackingName !== 'unknown' ? this._trackingName : this._url;\n      this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);\n      GlobalPerformanceLogger.startTimespan(this._perfKey);\n      invariant(\n        this._method,\n        'XMLHttpRequest method needs to be defined (%s).',\n        friendlyName,\n      );\n      invariant(\n        this._url,\n        'XMLHttpRequest URL needs to be defined (%s).',\n        friendlyName,\n      );\n      RCTNetworking.sendRequest(\n        this._method,\n        this._trackingName,\n        this._url,\n        this._headers,\n        data,\n        /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n         * when making Flow check .android.js files. */\n        nativeResponseType,\n        incrementalEvents,\n        this.timeout,\n        this.__didCreateRequest.bind(this),\n        this.withCredentials,\n      );\n    };\n    if (DEBUG_NETWORK_SEND_DELAY) {\n      setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);\n    } else {\n      doSend();\n    }\n  }\n\n  abort(): void {\n    this._aborted = true;\n    if (this._requestId) {\n      RCTNetworking.abortRequest(this._requestId);\n    }\n    // only call onreadystatechange if there is something to abort,\n    // below logic is per spec\n    if (\n      !(\n        this.readyState === this.UNSENT ||\n        (this.readyState === this.OPENED && !this._sent) ||\n        this.readyState === this.DONE\n      )\n    ) {\n      this._reset();\n      this.setReadyState(this.DONE);\n    }\n    // Reset again after, in case modified in handler\n    this._reset();\n  }\n\n  setResponseHeaders(responseHeaders: ?Object): void {\n    this.responseHeaders = responseHeaders || null;\n    const headers = responseHeaders || {};\n    this._lowerCaseResponseHeaders = Object.keys(headers).reduce(\n      (lcaseHeaders, headerName) => {\n        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];\n        return lcaseHeaders;\n      },\n      {},\n    );\n  }\n\n  setReadyState(newState: number): void {\n    this.readyState = newState;\n    this.dispatchEvent({type: 'readystatechange'});\n    if (newState === this.DONE) {\n      if (this._aborted) {\n        this.dispatchEvent({type: 'abort'});\n      } else if (this._hasError) {\n        if (this._timedOut) {\n          this.dispatchEvent({type: 'timeout'});\n        } else {\n          this.dispatchEvent({type: 'error'});\n        }\n      } else {\n        this.dispatchEvent({type: 'load'});\n      }\n      this.dispatchEvent({type: 'loadend'});\n    }\n  }\n\n  /* global EventListener */\n  addEventListener(type: string, listener: EventListener): void {\n    // If we dont' have a 'readystatechange' event handler, we don't\n    // have to send repeated LOADING events with incremental updates\n    // to responseText, which will avoid a bunch of native -> JS\n    // bridge traffic.\n    if (type === 'readystatechange' || type === 'progress') {\n      this._incrementalEvents = true;\n    }\n    super.addEventListener(type, listener);\n  }\n}\n\nmodule.exports = XMLHttpRequest;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}