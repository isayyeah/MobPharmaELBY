{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar getDevServer = require(\"./getDevServer\");\nimport NativeSourceCode from \"../../NativeModules/specs/NativeSourceCode\";\nvar fetch;\nfunction isSourcedFromDisk(sourcePath) {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\nfunction symbolicateStackTrace(stack) {\n  var devServer, stackCopy, _NativeSourceCode$get, scriptURL, foundInternalSource, response;\n  return _regeneratorRuntime.async(function symbolicateStackTrace$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!fetch) {\n            fetch = global.fetch || require(\"../../Network/fetch\").fetch;\n          }\n          devServer = getDevServer();\n          if (devServer.bundleLoadedFromServer) {\n            _context.next = 4;\n            break;\n          }\n          throw new Error('Bundle was not loaded from the packager');\n        case 4:\n          stackCopy = stack;\n          _NativeSourceCode$get = NativeSourceCode.getConstants(), scriptURL = _NativeSourceCode$get.scriptURL;\n          if (scriptURL) {\n            foundInternalSource = false;\n            stackCopy = stack.map(function (frame) {\n              if (frame.file == null) {\n                return frame;\n              }\n              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n                return _objectSpread(_objectSpread({}, frame), {}, {\n                  file: scriptURL\n                });\n              }\n              foundInternalSource = true;\n              return frame;\n            });\n          }\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {\n            method: 'POST',\n            body: JSON.stringify({\n              stack: stackCopy\n            })\n          }));\n        case 9:\n          response = _context.sent;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(response.json());\n        case 12:\n          return _context.abrupt(\"return\", _context.sent);\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nmodule.exports = symbolicateStackTrace;","map":{"version":3,"names":["_defineProperty","_regeneratorRuntime","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","getDevServer","require","NativeSourceCode","fetch","isSourcedFromDisk","sourcePath","test","symbolicateStackTrace","stack","devServer","stackCopy","_NativeSourceCode$get","scriptURL","foundInternalSource","response","async","symbolicateStackTrace$","_context","prev","next","global","bundleLoadedFromServer","Error","getConstants","map","frame","file","awrap","url","method","body","JSON","stringify","sent","json","abrupt","stop","Promise","module","exports"],"sources":["D:/React-Native/Pharma/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst getDevServer = require('./getDevServer');\n\nimport NativeSourceCode from '../../NativeModules/specs/NativeSourceCode';\n\n// Avoid requiring fetch on load of this module; see symbolicateStackTrace\nlet fetch;\n\nimport type {StackFrame} from '../NativeExceptionsManager';\n\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n|}>;\n\nexport type SymbolicatedStackTrace = $ReadOnly<{|\n  stack: Array<StackFrame>,\n  codeFrame: ?CodeFrame,\n|}>;\n\nfunction isSourcedFromDisk(sourcePath: string): boolean {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nasync function symbolicateStackTrace(\n  stack: Array<StackFrame>,\n): Promise<SymbolicatedStackTrace> {\n  // RN currently lazy loads whatwg-fetch using a custom fetch module, which,\n  // when called for the first time, requires and re-exports 'whatwg-fetch'.\n  // However, when a dependency of the project tries to require whatwg-fetch\n  // either directly or indirectly, whatwg-fetch is required before\n  // RN can lazy load whatwg-fetch. As whatwg-fetch checks\n  // for a fetch polyfill before loading, it will in turn try to load\n  // RN's fetch module, which immediately tries to import whatwg-fetch AGAIN.\n  // This causes a circular require which results in RN's fetch module\n  // exporting fetch as 'undefined'.\n  // The fix below postpones trying to load fetch until the first call to symbolicateStackTrace.\n  // At that time, we will have either global.fetch (whatwg-fetch) or RN's fetch.\n  if (!fetch) {\n    fetch = global.fetch || require('../../Network/fetch').fetch;\n  }\n\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from the packager');\n  }\n\n  let stackCopy = stack;\n\n  const {scriptURL} = NativeSourceCode.getConstants();\n  if (scriptURL) {\n    let foundInternalSource: boolean = false;\n    stackCopy = stack.map((frame: StackFrame) => {\n      if (frame.file == null) {\n        return frame;\n      }\n\n      // If the sources exist on disk rather than appearing to come from the packager,\n      // replace the location with the packager URL until we reach an internal source\n      // which does not have a path (no slashes), indicating a switch from within\n      // the application to a surrounding debugging environment.\n      if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n        // Copy frame into new object and replace 'file' property\n        return {...frame, file: scriptURL};\n      }\n\n      foundInternalSource = true;\n      return frame;\n    });\n  }\n\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({stack: stackCopy}),\n  });\n  return await response.json();\n}\n\nmodule.exports = symbolicateStackTrace;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}