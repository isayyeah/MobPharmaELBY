{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar EmitterSubscription = require(\"./EmitterSubscription\");\nvar EventSubscriptionVendor = require(\"./EventSubscriptionVendor\");\nvar invariant = require('invariant');\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventType, listener, context) {\n      var _this = this;\n      return this.addListener(eventType, function () {\n        _this.removeCurrentListener();\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        listener.apply(context, args);\n      });\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      this._subscriber.removeAllSubscriptions(eventType);\n    }\n  }, {\n    key: \"removeCurrentListener\",\n    value: function removeCurrentListener() {\n      invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n      this.removeSubscription(this._currentSubscription);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n      this._subscriber.removeSubscription(subscription);\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      return subscriptions ? subscriptions.filter(sparseFilterPredicate).map(function (subscription) {\n        return subscription.listener;\n      }) : [];\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n          if (subscription && subscription.listener) {\n            this._currentSubscription = subscription;\n            subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n          }\n        }\n        this._currentSubscription = null;\n      }\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n          }\n        }\n      }\n    }\n  }]);\n  return EventEmitter;\n}();\nmodule.exports = EventEmitter;","map":{"version":3,"names":["_classCallCheck","require","_createClass","EmitterSubscription","EventSubscriptionVendor","invariant","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","key","value","addListener","eventType","listener","context","addSubscription","once","_this","removeCurrentListener","_len","arguments","length","args","Array","_key","apply","removeAllListeners","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","map","emit","i","l","prototype","slice","call","removeListener","remove","module","exports"],"sources":["D:/React-Native/Pharma/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n * @typecheck\n */\n\n'use strict';\n\nconst EmitterSubscription = require('./EmitterSubscription');\nconst EventSubscriptionVendor = require('./EventSubscriptionVendor');\n\nconst invariant = require('invariant');\n\nconst sparseFilterPredicate = () => true;\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n  _subscriber: EventSubscriptionVendor;\n  _currentSubscription: ?EmitterSubscription;\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber: ?EventSubscriptionVendor) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return (this._subscriber.addSubscription(\n      eventType,\n      new EmitterSubscription(this, this._subscriber, listener, context),\n    ): any);\n  }\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  once(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return this.addListener(eventType, (...args) => {\n      this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  }\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  removeAllListeners(eventType: ?string) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  removeCurrentListener() {\n    invariant(\n      !!this._currentSubscription,\n      'Not in an emitting cycle; there is no current subscription',\n    );\n    this.removeSubscription(this._currentSubscription);\n  }\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  removeSubscription(subscription: EmitterSubscription) {\n    invariant(\n      subscription.emitter === this,\n      'Subscription does not belong to this emitter.',\n    );\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  listeners(eventType: string): [EmitterSubscription] {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions\n      ? subscriptions\n          // We filter out missing entries because the array is sparse.\n          // \"callbackfn is called only for elements of the array which actually\n          // exist; it is not called for missing elements of the array.\"\n          // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n          .filter(sparseFilterPredicate)\n          .map(subscription => subscription.listener)\n      : [];\n  }\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  emit(eventType: string) {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription && subscription.listener) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(\n            subscription.context,\n            Array.prototype.slice.call(arguments, 1),\n          );\n        }\n      }\n      this._currentSubscription = null;\n    }\n  }\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  removeListener(eventType: String, listener) {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}